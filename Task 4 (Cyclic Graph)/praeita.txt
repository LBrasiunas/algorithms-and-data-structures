#define INFINITY 9999
#define MAX 10

/*void search();
void Dijkstra(int Graph[MAX][MAX], int n, int start, int end);

int main()
{
    /*Graph[0][0] = 0;
    Graph[0][1] = 0;
    Graph[0][2] = 1;
    Graph[0][3] = 2;
    Graph[0][4] = 0;
    Graph[0][5] = 0;
    Graph[0][6] = 0;

    Graph[1][0] = 0;
    Graph[1][1] = 0;
    Graph[1][2] = 2;
    Graph[1][3] = 0;
    Graph[1][4] = 0;
    Graph[1][5] = 3;
    Graph[1][6] = 0;

    Graph[2][0] = 1;
    Graph[2][1] = 2;
    Graph[2][2] = 0;
    Graph[2][3] = 1;
    Graph[2][4] = 3;
    Graph[2][5] = 0;
    Graph[2][6] = 0;

    Graph[3][0] = 2;
    Graph[3][1] = 0;
    Graph[3][2] = 1;
    Graph[3][3] = 0;
    Graph[3][4] = 0;
    Graph[3][5] = 0;
    Graph[3][6] = 1;

    Graph[4][0] = 0;
    Graph[4][1] = 0;
    Graph[4][2] = 3;
    Graph[4][3] = 0;
    Graph[4][4] = 0;
    Graph[4][5] = 2;
    Graph[4][6] = 0;

    Graph[5][0] = 0;
    Graph[5][1] = 3;
    Graph[5][2] = 0;
    Graph[5][3] = 0;
    Graph[5][4] = 2;
    Graph[5][5] = 0;
    Graph[5][6] = 1;

    Graph[6][0] = 0;
    Graph[6][1] = 0;
    Graph[6][2] = 0;
    Graph[6][3] = 1;
    Graph[6][4] = 0;
    Graph[6][5] = 1;
    Graph[6][6] = 0;*/
/*search();

return 0;
}

void search()
{
FILE *fp;
int amount, source, destination;
char filename[20];
printf("Enter a name of a file you want to put the answer. Must end with .txt!\n");
scanf("%19s", filename);
fp = fopen(filename, "r");
printf("Opened\n");
fscanf(fp, "%d%d%d", &amount, &source, &destination);
printf("Opened\n");
int graph[amount-1][amount-1];
printf("Opened\n");
for(int i = 0; i < amount; ++i)
{
    for(int j = 0; j < amount; ++j)
    {
        fscanf(fp, "%d", &graph[i][j]);
        printf("%d ", graph[i][j]);
    }
    printf("\n");
}
fclose(fp);
Dijkstra(graph, amount, source, destination);
}

void Dijkstra(int Graph[MAX][MAX], int n, int start, int end)
{
int cost[MAX][MAX], distance[MAX], pred[MAX];
int visited[MAX], count, mindistance, nextnode, i, j;

// Creating cost matrix
for (i = 0; i < n; i++)
    for (j = 0; j < n; j++)
        if (Graph[i][j] == 0)
            cost[i][j] = INFINITY;
        else
            cost[i][j] = Graph[i][j];

for (i = 0; i < n; i++)
{
    distance[i] = cost[start][i];
    pred[i] = start;
    visited[i] = 0;
}

distance[start] = 0;
visited[start] = 1;
count = 1;

while (count < n - 1)
{
    mindistance = INFINITY;

    for (i = 0; i < n; i++)
        if (distance[i] < mindistance && !visited[i])
        {
            mindistance = distance[i];
            nextnode = i;
        }

    visited[nextnode] = 1;
    for (i = 0; i < n; i++)
        if (!visited[i])
            if (mindistance + cost[nextnode][i] < distance[i])
            {
                distance[i] = mindistance + cost[nextnode][i];
                pred[i] = nextnode;
            }
    count++;
}

// Printing the distance
//for (i = 0; i < n; i++)
    //if (i != start)
    //{
        printf("\nDistance from %d to %d: %d", start, end, distance[end-1]);
   //}
}*/
